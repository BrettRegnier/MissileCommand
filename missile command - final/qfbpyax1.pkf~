using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Missile_Command___Final
{
    public partial class GameForm : Form
    {
        private List<DefenseTower> TowerList = new List<DefenseTower>();
        private List<Building> BuildingList = new List<Building>();
        private List<Bomb> BombList = new List<Bomb>();
        private List<PlayerBomb> PBombList = new List<PlayerBomb>();
        private List<Cursor> CursorList = new List<Cursor>();
        private InGameMenu myStartMenu;
        private bool isKeyDown = false;
        private bool isPlaying = true;
        private Random rand = new Random();
        private int numPlayers = 0;
        private int playerVar = 0;

        private IncomeMenu incomeMenu;
        private EngineeringMenu engineerMenu;
        private ResearchMenu researchMenu;

        // Enemy Missiles
        private int sendCounter = 0;
        private int sendInterval = 30;

        private Graphics g;

        private LinkerClass Link;
        

        enum KPress
        {
            none = 0,
            up = 1,
            right = 2,
            down = 4,
            left = 8,
            shoot = 16
            //showMenu = 32
        };

        enum Player
        {
            P1 = 0,
            P2,
            P3,
            P4
        }

        KPress Player1 = KPress.none;
        KPress Player2 = KPress.none;
        KPress Player3 = KPress.none;
        KPress Player4 = KPress.none;

        public GameForm(int NumPlayers)
        {
            InitializeComponent();
            this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
            this.SetStyle(ControlStyles.ResizeRedraw, true);
            this.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            this.SetStyle(ControlStyles.UserPaint, true);
            this.numPlayers = NumPlayers;
        }

        private void CommandForm_Load(object sender, EventArgs e)
        {
            try
            {
                // Maximize and hide everything else
                this.StartPosition = 0;
                int height = Screen.PrimaryScreen.Bounds.Height;
                int width = Screen.PrimaryScreen.Bounds.Width;
                this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;

                this.ClientSize = new Size(width, height);
                //this.ClientSize = new Size(1366, 768);

                GameTimer.Enabled = true;
                myStartMenu = new InGameMenu(this, this.ClientSize.Width, this.ClientSize.Height);
                myStartMenu.StateHandler += ChangeGameState;
                myStartMenu.DisplayIncomeMenu += MyStartMenu_DisplayIncomeMenu;
                myStartMenu.DisplayResearchMenu += MyStartMenu_DisplayResearchMenu;
                myStartMenu.DisplayEngineerMenu += MyStartMenu_DisplayEngineerMenu;

                Link = new LinkerClass();

                incomeMenu = new IncomeMenu(this.ClientSize.Width, this.ClientSize.Height, this, Link );
                incomeMenu.checkPosition += CheckPosition;
                incomeMenu.invalidateForm += UpdateMoney;
                engineerMenu = new EngineeringMenu(this.ClientSize.Width, this.ClientSize.Height, this, Link);
                engineerMenu.checkPosition += CheckPosition;
                engineerMenu.invalidateForm += UpdateMoney;
                researchMenu = new ResearchMenu(this.ClientSize.Width, this.ClientSize.Height, this, Link);
                researchMenu.checkPosition += CheckPosition;
                researchMenu.invalidateForm += UpdateMoney;

                AddPlayerObjects();
                AddBuildings();
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
        }

        private void CheckPosition()
        {
            // Check for when the income menu is opened
            //if (researchMenu.Visible && engineerMenu.Visible)
            //{
            //    researchMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            //    engineerMenu.PosX = researchMenu.PosX + (researchMenu.Width + 10);
            //}
            //else if (researchMenu.Visible)
            //{
            //    researchMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            //}
            //else if (engineerMenu.Visible)
            //{
            //    engineerMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            //}

            // Check for when the research menu is opened
            //if (incomeMenu.Visible)
            //{
            //    researchMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            //}
            //else
            //{
            //    researchMenu.PosX = incomeMenu.PosX;
            //}

            //if (engineerMenu.Visible)
            //{
            //    engineerMenu.PosX = researchMenu.PosX + (researchMenu.Width + 10);
            //}


            // Check for when the engineer menu is opened
            //if (researchMenu.Visible)
            //{
            //    engineerMenu.PosX = researchMenu.PosX + (researchMenu.Width + 10);
            //}
            //else if (incomeMenu.Visible)
            //{
            //    engineerMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            //}
            //else
            //{
            //    engineerMenu.PosX = incomeMenu.PosX;
            //}




            if (!incomeMenu.Visible && !researchMenu.Visible)
            {
                engineerMenu.PosX = incomeMenu.PosX;
            }
            else if (!incomeMenu.Visible)
            {
                researchMenu.PosX = incomeMenu.PosX;
                engineerMenu.PosX = researchMenu.PosX + (researchMenu.Width + 10);
            }
            else if (!researchMenu.Visible)
            {
                engineerMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            }
        }

        private void MyStartMenu_DisplayIncomeMenu()
        {
            incomeMenu.DisplayMenu();
            //CheckPosition();

            if (researchMenu.Visible && engineerMenu.Visible)
            {
                researchMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
                engineerMenu.PosX = researchMenu.PosX + (researchMenu.Width + 10);
            }
            else if (researchMenu.Visible)
            {
                researchMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            }
            else if (engineerMenu.Visible)
            {
                engineerMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            }
        }

        private void MyStartMenu_DisplayResearchMenu()
        {
            researchMenu.DisplayMenu();
            //CheckPosition();

            if (incomeMenu.Visible)
            {
                researchMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            }
            else
            {
                researchMenu.PosX = incomeMenu.PosX;
            }

            if (engineerMenu.Visible)
            {
                engineerMenu.PosX = researchMenu.PosX + (researchMenu.Width + 10);
            }
        }

        private void MyStartMenu_DisplayEngineerMenu()
        {
            engineerMenu.DisplayMenu();
            //CheckPosition();

            if (researchMenu.Visible)
            {
                engineerMenu.PosX = researchMenu.PosX + (researchMenu.Width + 10);
            }
            else if (incomeMenu.Visible)
            {
                engineerMenu.PosX = incomeMenu.PosX + (incomeMenu.Width + 10);
            }
            else
            {
                engineerMenu.PosX = incomeMenu.PosX;
            }
        }

        public void AddPlayerObjects()
        {
            int startVal = 0;
            int clientSplit = this.ClientSize.Width / 2;

            if (numPlayers == 2 || numPlayers == 4)
            {
                startVal = this.ClientSize.Width / 8;
                clientSplit = this.ClientSize.Width / 4;
            }
            if (numPlayers == 3)
            {
                startVal = this.ClientSize.Width / 6;
                clientSplit = this.ClientSize.Width / 3;
            }

            // the weird values determine where the defense buildings will be placed.
            for (int i = 0; i < numPlayers; i++)
            {
                switch (i)
                {
                    case (int)Player.P1:
                        playerVar = 1;
                        break;

                    case (int)Player.P2:
                        playerVar = 2;
                        break;

                    case (int)Player.P3:
                        playerVar = 0;
                        break;

                    case (int)Player.P4:
                        playerVar = 3;
                        break;
                }

                Cursor Cursor = new Cursor(startVal + (clientSplit * playerVar), this.ClientSize.Height, i);
                Cursor.FormWidth = this.ClientSize.Width;
                Cursor.FormHeight = this.ClientSize.Height;
                CursorList.Add(Cursor);

                DefenseTower Tower = new DefenseTower(new Point(startVal + (clientSplit * playerVar), this.ClientSize.Height), i, Link);
                TowerList.Add(Tower);
                Point tmp = Tower.GunPosition;
            }



            //BuildingList.Add(new IncomeBuilding(new Point(this.ClientSize.Width / 8, this.ClientSize.Height)));
            //BuildingList.Add(new ResearchBuilding(new Point(this.ClientSize.Width / 3, this.ClientSize.Height)));
            //BuildingList.Add(new EngineerBuilding(new Point((clientSplit * playerVar), this.ClientSize.Height)));
            //BuildingList.Add(new GenericBuilding(new Point((clientSplit * playerVar) * 6, this.ClientSize.Height)));
        }

        private void AddBuildings()
        {
            // Make a formula to divide this evenly without this nasty nasty nasty nasty code.

            int startVal = this.ClientSize.Width / 39;
            int clientSplit = this.ClientSize.Width / 11;

            switch (numPlayers)
            {
                case 2:
                    startVal = -this.ClientSize.Width / 39;
                    clientSplit = this.ClientSize.Width / 12;
                    break;
                case 3:
                    startVal = -this.ClientSize.Width / 12;
                    clientSplit = this.ClientSize.Width / 8;
                    break;
                case 4:
                    startVal = -this.ClientSize.Width / 11;
                    clientSplit = this.ClientSize.Width / 9;
                    break;
            }


            IncomeBuilding IncomeBuild = new IncomeBuilding(new Point(startVal + clientSplit, this.ClientSize.Height), Link);
            BuildingList.Add(IncomeBuild);

            ResearchBuilding ResearchBuild = new ResearchBuilding(new Point(startVal + clientSplit * 3, this.ClientSize.Height), Link);
            BuildingList.Add(ResearchBuild);

            switch (numPlayers)
            {
                case 1:
                    startVal = TowerList[0].PosX + 50;
                    break;
                case 2:
                    startVal = TowerList[1].PosX + 50;
                    break;
                case 3:
                    startVal = TowerList[0].PosX + 50;
                    break;
                case 4:
                    startVal = TowerList[1].PosX - 50;
                    break;
            }


            EngineerBuilding EngineerBuild = new EngineerBuilding(new Point(startVal + clientSplit, this.ClientSize.Height), Link);
            BuildingList.Add(EngineerBuild);

            BuildingList.Add(new GenericBuilding(new Point(startVal + (clientSplit * 3), this.ClientSize.Height), Link));


            //int PosX = this.ClientSize.Width / 13;
            //int PosX2 = 0;
            //if (numPlayers == 2)
            //{
            //    //PosX = TowerList[0].GunPosition.X + ((TowerList[1].GunPosition.X - TowerList[0].GunPosition.X) / 2) - 50;
            //    //PosX = this.ClientSize.Width / 20;
            //    int PosX2 = TowerList[1].GunPosition.X + 50;
            //}

            //IncomeBuilding IncomeBuild = new IncomeBuilding(new Point(PosX, this.ClientSize.Height));
            //BuildingList.Add(IncomeBuild);

            //ResearchBuilding ResearchBuild = new ResearchBuilding(new Point(PosX * 4, this.ClientSize.Height));
            //BuildingList.Add(ResearchBuild);

            //EngineerBuilding EngineerBuild = new EngineerBuilding(new Point(PosX * 8, this.ClientSize.Height));
            //BuildingList.Add(EngineerBuild);

            //BuildingList.Add(new GenericBuilding(new Point(PosX * 11, this.ClientSize.Height)));

        }

        private void CommandForm_Paint(object sender, PaintEventArgs e)
        {
            g = e.Graphics;
            for (int i = TowerList.Count - 1; i >= 0; i--)
            {
                TowerList[i].Draw(e.Graphics);
                CursorList[i].Draw(e.Graphics);
            }

            for (int i = BombList.Count - 1; i >= 0; i--)
            {
                BombList[i].Draw(e.Graphics);
            }

            for (int i = BuildingList.Count - 1; i >= 0; i--)
            {
                BuildingList[i].Draw(e.Graphics);
            }

            g.DrawString("Money: " + Link.currentMoney.ToString("C"), new Font("Arial", 14), Brushes.Red, 10, 10);
        }

        private void GameTimer_Tick(object sender, EventArgs e)
        {
            if (isPlaying)
            {
                // Add method of making intervals faster based on how long/points of the player(s)
                if (SendBomb())
                {
                    Point originPoint = new Point(rand.Next(0, this.Width), 0);
                    Point destinationPoint = new Point(rand.Next(0, this.ClientSize.Width), this.ClientSize.Height);
                    EnemyBasicBomb EBB = new EnemyBasicBomb(originPoint, destinationPoint, this);
                    EBB.DestroyBomb += RemoveBomb;
                    BombList.Add(EBB);
                }

                foreach (Bomb bmb in BombList)
                {
                    bmb.Move();
                }
                                
                for (int i = 0; i < BombList.Count - 1; i++)
                {
                    for (int j = 0; j < BombList.Count; j++)
                    {
                        if ((BombList[i] is EnemyBasicBomb && BombList[j] is PlayerBomb) || (BombList[i] is PlayerBomb && BombList[j] is EnemyBasicBomb))
                        {
                            if (bombCollision(i, j))
                            {
                                if (BombList[i] is EnemyBasicBomb)
                                    if (((EnemyBasicBomb)BombList[i]).MoneyRecieved == false)
                                        Link.currentMoney += incomeMenu.bounty;

                                if (BombList[j] is EnemyBasicBomb)
                                    if (((EnemyBasicBomb)BombList[j]).MoneyRecieved == false)
                                        Link.currentMoney += incomeMenu.bounty;

                                BombList[i].collided();
                                BombList[j].collided();
                            }
                        }
                    }
                }

                for (int i = 0; i < BombList.Count - 1; i++)
                {
                    for (int j = 0; j < BuildingList.Count - 1; j++)
                    {
                        if (BombList[i] is  EnemyBasicBomb)
                        {
                            if (collision)
                        }
                    }
                }

                MoveCursors();

                this.Invalidate(false);
            }
        }

        // moving of all the players and allowing them to press 3 keys at the same time.
        private void MoveCursors()
        {
            if (numPlayers > 0)
            {
                if ((Player1 & KPress.left) == KPress.left)
                {
                    CursorList[(int)Player.P1].move((int)KPress.left);
                    TowerList[(int)Player.P1].TurretCalc(CursorList[(int)Player.P1].PosX, CursorList[(int)Player.P1].PosY);
                }

                if ((Player1 & KPress.right) == KPress.right)
                {
                    CursorList[(int)Player.P1].move((int)KPress.right);
                    TowerList[(int)Player.P1].TurretCalc(CursorList[(int)Player.P1].PosX, CursorList[(int)Player.P1].PosY);
                }

                if ((Player1 & KPress.down) == KPress.down)
                {
                    CursorList[(int)Player.P1].move((int)KPress.down);
                    TowerList[(int)Player.P1].TurretCalc(CursorList[(int)Player.P1].PosX, CursorList[(int)Player.P1].PosY);
                }

                if ((Player1 & KPress.up) == KPress.up)
                {
                    CursorList[(int)Player.P1].move((int)KPress.up);
                    TowerList[(int)Player.P1].TurretCalc(CursorList[(int)Player.P1].PosX, CursorList[(int)Player.P1].PosY);
                }

                if ((Player1 & KPress.shoot) == KPress.shoot && !isKeyDown)
                {
                    isKeyDown = true;
                    Point originPoint = TowerList[(int)Player.P1].GunPosition;
                    Point destinationPoint = new Point(CursorList[(int)Player.P1].PosX, CursorList[(int)Player.P1].PosY);
                    PlayerBomb db = new PlayerBomb(originPoint, destinationPoint, this, (int)Player.P1, Link);
                    db.DestroyBomb += RemoveBomb;
                    BombList.Add(db);
                }
            }

            if (numPlayers > 1)
            {
                if ((Player2 & KPress.left) == KPress.left)
                {
                    CursorList[(int)Player.P2].move((int)KPress.left);
                    TowerList[(int)Player.P2].TurretCalc(CursorList[(int)Player.P2].PosX, CursorList[(int)Player.P2].PosY);
                }

                if ((Player2 & KPress.right) == KPress.right)
                {
                    CursorList[(int)Player.P2].move((int)KPress.right);
                    TowerList[(int)Player.P2].TurretCalc(CursorList[(int)Player.P2].PosX, CursorList[(int)Player.P2].PosY);
                }

                if ((Player2 & KPress.down) == KPress.down)
                {
                    CursorList[(int)Player.P2].move((int)KPress.down);
                    TowerList[(int)Player.P2].TurretCalc(CursorList[(int)Player.P2].PosX, CursorList[(int)Player.P2].PosY);
                }

                if ((Player2 & KPress.up) == KPress.up)
                {
                    CursorList[(int)Player.P2].move((int)KPress.up);
                    TowerList[(int)Player.P2].TurretCalc(CursorList[(int)Player.P2].PosX, CursorList[(int)Player.P2].PosY);
                }

                if ((Player2 & KPress.shoot) == KPress.shoot && !isKeyDown)
                {
                    isKeyDown = true;
                    Point originPoint = TowerList[(int)Player.P2].GunPosition;
                    Point destinationPoint = new Point(CursorList[(int)Player.P2].PosX, CursorList[(int)Player.P2].PosY);
                    PlayerBomb db = new PlayerBomb(originPoint, destinationPoint, this, (int)Player.P2, Link);
                    db.DestroyBomb += RemoveBomb;
                    BombList.Add(db);
                }
            }

            if (numPlayers > 2)
            {
                if ((Player3 & KPress.left) == KPress.left)
                {
                    CursorList[(int)Player.P3].move((int)KPress.left);
                    TowerList[(int)Player.P3].TurretCalc(CursorList[(int)Player.P3].PosX, CursorList[(int)Player.P3].PosY);
                }

                if ((Player3 & KPress.right) == KPress.right)
                {
                    CursorList[(int)Player.P3].move((int)KPress.right);
                    TowerList[(int)Player.P3].TurretCalc(CursorList[(int)Player.P3].PosX, CursorList[(int)Player.P3].PosY);
                }

                if ((Player3 & KPress.down) == KPress.down)
                {
                    CursorList[(int)Player.P3].move((int)KPress.down);
                    TowerList[(int)Player.P3].TurretCalc(CursorList[(int)Player.P3].PosX, CursorList[(int)Player.P3].PosY);
                }

                if ((Player3 & KPress.up) == KPress.up)
                {
                    CursorList[(int)Player.P3].move((int)KPress.up);
                    TowerList[(int)Player.P3].TurretCalc(CursorList[(int)Player.P3].PosX, CursorList[(int)Player.P3].PosY);
                }

                if ((Player3 & KPress.shoot) == KPress.shoot && !isKeyDown)
                {
                    isKeyDown = true;
                    Point originPoint = TowerList[(int)Player.P3].GunPosition;
                    Point destinationPoint = new Point(CursorList[(int)Player.P3].PosX, CursorList[(int)Player.P3].PosY);
                    PlayerBomb db = new PlayerBomb(originPoint, destinationPoint, this, (int)Player.P3, Link);
                    db.DestroyBomb += RemoveBomb;
                    BombList.Add(db);
                }
            }

            if (numPlayers > 3)
            {
                if ((Player4 & KPress.left) == KPress.left)
                {
                    CursorList[(int)Player.P4].move((int)KPress.left);
                    TowerList[(int)Player.P4].TurretCalc(CursorList[(int)Player.P4].PosX, CursorList[(int)Player.P4].PosY);
                }

                if ((Player4 & KPress.right) == KPress.right)
                {
                    CursorList[(int)Player.P4].move((int)KPress.right);
                    TowerList[(int)Player.P4].TurretCalc(CursorList[(int)Player.P4].PosX, CursorList[(int)Player.P4].PosY);
                }

                if ((Player4 & KPress.down) == KPress.down)
                {
                    CursorList[(int)Player.P4].move((int)KPress.down);
                    TowerList[(int)Player.P4].TurretCalc(CursorList[(int)Player.P4].PosX, CursorList[(int)Player.P4].PosY);
                }

                if ((Player4 & KPress.up) == KPress.up)
                {
                    CursorList[(int)Player.P4].move((int)KPress.up);
                    TowerList[(int)Player.P4].TurretCalc(CursorList[(int)Player.P4].PosX, CursorList[(int)Player.P4].PosY);
                }

                if ((Player4 & KPress.shoot) == KPress.shoot && !isKeyDown)
                {
                    isKeyDown = true;
                    Point originPoint = TowerList[(int)Player.P4].GunPosition;
                    Point destinationPoint = new Point(CursorList[(int)Player.P4].PosX, CursorList[(int)Player.P4].PosY);
                    PlayerBomb db = new PlayerBomb(originPoint, destinationPoint, this, (int)Player.P4,Link);
                    db.DestroyBomb += RemoveBomb;
                    BombList.Add(db);
                }
            }
        }

        // Side project.
        private void CommandForm_MouseMove(object sender, MouseEventArgs e)
        {
            //TowerList[0].TurretCalc(e.X, e.Y);
        }

        private void CommandForm_KeyDown(object sender, KeyEventArgs e)
        {
            // Player 1
            if (e.KeyData == Keys.A)
                Player1 |= KPress.left;
            if (e.KeyData == Keys.W)
                Player1 |= KPress.up;
            if (e.KeyData == Keys.D)
                Player1 |= KPress.right;
            if (e.KeyData == Keys.S)
                Player1 |= KPress.down;
            if (e.KeyData == Keys.Space)
                Player1 |= KPress.shoot;

            // Player 2
            if (e.KeyData == Keys.Left)
                Player2 |= KPress.left;
            if (e.KeyData == Keys.Up)
                Player2 |= KPress.up;
            if (e.KeyData == Keys.Right)
                Player2 |= KPress.right;
            if (e.KeyData == Keys.Down)
                Player2 |= KPress.down;
            if (e.KeyData == Keys.NumPad0)
                Player2 |= KPress.shoot;
        }

        private void CommandForm_KeyUp(object sender, KeyEventArgs e)
        {
            // Player 1
            if (e.KeyData == Keys.A)
                Player1 &= ~KPress.left;
            if (e.KeyData == Keys.W)
                Player1 &= ~KPress.up;
            if (e.KeyData == Keys.D)
                Player1 &= ~KPress.right;
            if (e.KeyData == Keys.S)
                Player1 &= ~KPress.down;
            if (e.KeyData == Keys.Space)
            {
                Player1 &= ~KPress.shoot;
                isKeyDown = false;
            }

            // Player 2
            if (e.KeyData == Keys.Left)
                Player2 &= ~KPress.left;
            if (e.KeyData == Keys.Up)
                Player2 &= ~KPress.up;
            if (e.KeyData == Keys.Right)
                Player2 &= ~KPress.right;
            if (e.KeyData == Keys.Down)
                Player2 &= ~KPress.down;
            if (e.KeyData == Keys.NumPad0)
            {
                Player2 &= ~KPress.shoot;
                isKeyDown = false;
            }
        }

        protected override bool ProcessCmdKey(ref Message msg, Keys keyData)
        {
            if (keyData == Keys.Enter && isPlaying)
            {
                ChangeGameState();
                myStartMenu.ShowMenu();
                return true;
            }

            return base.ProcessCmdKey(ref msg, keyData);
        }

        private void RemoveBomb(Bomb bmb)
        {
            BombList.Remove(bmb);
        }

        private bool SendBomb()
        {
            // Set variable to decrease interval.
            bool sendBomb = false;
            if (sendCounter++ == sendInterval)
            {
                sendCounter = 0;
                sendBomb = true;
            }
            return sendBomb;
        }

        private bool bombCollision(int i, int j)
        {
            if (BombList[i].bombPositionX + BombList[i].bombWidth < BombList[j].bombPositionX)
                return false;
            if (BombList[j].bombPositionX + BombList[j].bombWidth < BombList[i].bombPositionX)
                return false;
            if (BombList[i].bombPositionY + BombList[i].bombHeight < BombList[j].bombPositionY)
                return false;
            if (BombList[j].bombPositionY + BombList[j].bombHeight < BombList[i].bombPositionY)
                return false;

            return true;
        }

        public void ChangeGameState()
        {
            if (engineerMenu.Visible)
                engineerMenu.Visible = false;
            if (incomeMenu.Visible)
                incomeMenu.Visible = false;
            if (researchMenu.Visible)
                researchMenu.Visible = false;

            isPlaying = !isPlaying;
            Link.isPlaying = isPlaying;
            this.Focus();
        }

        public void UpdateMoney()
        {
            this.Invalidate(false);
        }
    }
}
